// SPDX-License-Identifier: MIT
pragma solidity 0.8.3;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import './Swapper.sol';

interface IBaseSwapper is ISwapper {
}

contract BaseSwapper is IBaseSwapper, Swapper {
  using SafeERC20 for IERC20;

  constructor(
    address _mechanicsRegistry,
    address _weth,
    uint256 _slippagePrecision
  ) Swapper(_mechanicsRegistry, _weth, _slippagePrecision) {
  }

  function executeSwap(uint256 _id) external onlyMechanic isPendingSwap(_id) returns (uint256 _receivedAmount) {
    Swap storage _swapInformation = _checkPreExecuteSwap(_id);
    // Execute swap
    _receivedAmount = 0;
    // send tokens to strategy
    _deletePendingSwap(_swapInformation);
  }
}
