{
  "address": "0x382ec4342775607ad64949bC26402b5F8CD651fe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DustSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "SwapperAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "SwapperDeprecated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeSwappers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_activeSwappers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "addSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "deprecateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deprecatedByAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deprecatedSwappers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_deprecatedSwappers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initializationByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isGovernor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "isSwapper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_swapper",
          "type": "string"
        }
      ],
      "name": "isSwapper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isSwapper",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_swapperAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialization",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nameByAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "swapperByName",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapperNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "_swappersNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swappers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_swappersAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3ccc6f3eda14de272bf942d32799527969dd6b224f07dfe81bd714d7c9e0374",
  "receipt": {
    "to": null,
    "from": "0xB82193725471dC7bfaAB1a3AB93c7b42963F3265",
    "contractAddress": "0x382ec4342775607ad64949bC26402b5F8CD651fe",
    "transactionIndex": 64,
    "gasUsed": "1373217",
    "logsBloom": "0x
    "blockHash": "0x9972a67a0ba0f6c0c911336165442de658142491ad81d9e8ff435acabf1bfe77",
    "transactionHash": "0xe3ccc6f3eda14de272bf942d32799527969dd6b224f07dfe81bd714d7c9e0374",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 17047631,
        "transactionHash": "0xe3ccc6f3eda14de272bf942d32799527969dd6b224f07dfe81bd714d7c9e0374",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b82193725471dc7bfaab1a3ab93c7b42963f3265",
          "0x0000000000000000000000004f856f79f54592a48c8a1a1fafa1b0a3ac053f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000004e0eeff90fe210000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000bd26689c8e6c28f317a0000000000000000000000000000000000000000000000008ac242158a5701df000000000000000000000000000000000000000000000bd2668ea9d5c2202f9b",
        "logIndex": 263,
        "blockHash": "0x9972a67a0ba0f6c0c911336165442de658142491ad81d9e8ff435acabf1bfe77"
      }
    ],
    "blockNumber": 17047631,
    "cumulativeGasUsed": "16584504",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB82193725471dC7bfaAB1a3AB93c7b42963F3265"
  ],
  "solcInputHash": "4b4ac38e41d3a6aafe00d06d8747a81d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"SwapperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"SwapperDeprecated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSwappers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_activeSwappers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"addSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"deprecateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deprecatedByAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecatedSwappers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_deprecatedSwappers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initializationByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"isSwapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_swapper\",\"type\":\"string\"}],\"name\":\"isSwapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isSwapper\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_swapperAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialization\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nameByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"swapperByName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapperNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_swappersNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_swappersAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapperRegistry.sol\":\"SwapperRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lbertenasco/contract-utils/contracts/utils/CollectableDust.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport '../../interfaces/utils/ICollectableDust.sol';\\n\\nabstract\\ncontract CollectableDust is ICollectableDust {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  EnumerableSet.AddressSet internal protocolTokens;\\n\\n  constructor() {}\\n\\n  function _addProtocolToken(address _token) internal {\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    protocolTokens.add(_token);\\n  }\\n\\n  function _removeProtocolToken(address _token) internal {\\n    require(protocolTokens.contains(_token), 'collectable-dust/token-not-part-of-the-protocol');\\n    protocolTokens.remove(_token);\\n  }\\n\\n  function _sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    require(_to != address(0), 'collectable-dust/cant-send-dust-to-zero-address');\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    if (_token == ETH_ADDRESS) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n    emit DustSent(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xea815f8af6516d2d83d12d5a9bd70f798b38578ed94924a2eb0943a0f93e7803\",\"license\":\"MIT\"},\"@lbertenasco/contract-utils/contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/utils/IGovernable.sol';\\n\\ncontract Governable is IGovernable {\\n  address public override governor;\\n  address public override pendingGovernor;\\n\\n  constructor(address _governor) {\\n    require(_governor != address(0), 'governable/governor-should-not-be-zero-address');\\n    governor = _governor;\\n  }\\n\\n  function setPendingGovernor(address _pendingGovernor) external virtual override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external virtual override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  function _setPendingGovernor(address _pendingGovernor) internal {\\n    require(_pendingGovernor != address(0), 'governable/pending-governor-should-not-be-zero-addres');\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(_pendingGovernor);\\n  }\\n\\n  function _acceptGovernor() internal {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit GovernorAccepted();\\n  }\\n\\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\\n    return _account == governor;\\n  }\\n\\n  modifier onlyGovernor {\\n    require(isGovernor(msg.sender), 'governable/only-governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor {\\n    require(msg.sender == pendingGovernor, 'governable/only-pending-governor');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x793f77e9f581d63c8a6e7f64cabef9d10844fce8e7f61a39201664f194d8bdbc\",\"license\":\"MIT\"},\"@lbertenasco/contract-utils/interfaces/utils/ICollectableDust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ICollectableDust {\\n  event DustSent(address _to, address token, uint256 amount);\\n\\n  function sendDust(address _to, address _token, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xbc17399974d1bf723ee94625274454ed028f209e18e2978f3531d12a5a08a10f\",\"license\":\"MIT\"},\"@lbertenasco/contract-utils/interfaces/utils/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address pendingGovernor);\\n  event GovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n  function acceptGovernor() external;\\n\\n  function governor() external view returns (address _governor);\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  function isGovernor(address _account) external view returns (bool _isGovernor);\\n}\\n\",\"keccak256\":\"0xb28881a80a14bd691ef413aea97d65a2a3d4b9a690403c57223d0f56b5656e4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/SwapperRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '@lbertenasco/contract-utils/contracts/utils/CollectableDust.sol';\\nimport '@lbertenasco/contract-utils/contracts/utils/Governable.sol';\\n\\ninterface ISwapperRegistry {\\n  event SwapperAdded(address indexed _swapper, string _name);\\n\\n  event SwapperDeprecated(address indexed _swapper);\\n\\n  function nameByAddress(address) external view returns (string memory);\\n\\n  function swapperByName(string memory) external view returns (address);\\n\\n  function initializationByAddress(address) external view returns (uint256);\\n\\n  function deprecatedByAddress(address) external view returns (bool);\\n\\n  function swappers() external view returns (address[] memory _swappersAddresses);\\n\\n  function swapperNames() external view returns (string[] memory _swappersNames);\\n\\n  function activeSwappers() external view returns (address[] memory _activeSwappers);\\n\\n  function deprecatedSwappers() external view returns (address[] memory _deprecatedSwappers);\\n\\n  function isSwapper(address _swapper) external view returns (bool);\\n\\n  function isSwapper(string memory _swapper)\\n    external\\n    view\\n    returns (\\n      bool _isSwapper,\\n      address _swapperAddress,\\n      uint256 _initialization\\n    );\\n\\n  function addSwapper(string memory _name, address _swapper) external;\\n\\n  function deprecateSwapper(address _swapper) external;\\n}\\n\\ncontract SwapperRegistry is ISwapperRegistry, CollectableDust, Governable {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  mapping(address => string) public override nameByAddress;\\n  mapping(string => address) public override swapperByName;\\n  mapping(address => uint256) public override initializationByAddress;\\n  mapping(address => bool) public override deprecatedByAddress;\\n  EnumerableSet.AddressSet internal _swappers;\\n\\n  constructor(address _governance) Governable(_governance) {}\\n\\n  function swappers() external view override returns (address[] memory _swappersAddresses) {\\n    _swappersAddresses = new address[](_swappers.length());\\n    for (uint256 i = 0; i < _swappers.length(); i++) {\\n      _swappersAddresses[i] = _swappers.at(i);\\n    }\\n  }\\n\\n  function swapperNames() external view override returns (string[] memory _swappersNames) {\\n    _swappersNames = new string[](_swappers.length());\\n    for (uint256 i = 0; i < _swappers.length(); i++) {\\n      _swappersNames[i] = nameByAddress[_swappers.at(i)];\\n    }\\n  }\\n\\n  function activeSwappers() external view override returns (address[] memory _activeSwappers) {\\n    _activeSwappers = new address[](_swappers.length());\\n    uint256 _totalActive = 0;\\n    for (uint256 i = 0; i < _swappers.length(); i++) {\\n      if (!deprecatedByAddress[_swappers.at(i)]) {\\n        _activeSwappers[_totalActive] = _swappers.at(i);\\n        _totalActive += 1;\\n      }\\n    }\\n  }\\n\\n  function deprecatedSwappers() external view override returns (address[] memory _deprecatedSwappers) {\\n    _deprecatedSwappers = new address[](_swappers.length());\\n    uint256 _totalDeprecated = 0;\\n    for (uint256 i = 0; i < _swappers.length(); i++) {\\n      if (deprecatedByAddress[_swappers.at(i)]) {\\n        _deprecatedSwappers[_totalDeprecated] = _swappers.at(i);\\n        _totalDeprecated += 1;\\n      }\\n    }\\n  }\\n\\n  function isSwapper(address _swapper) external view override returns (bool) {\\n    return _swappers.contains(_swapper);\\n  }\\n\\n  function isSwapper(string memory _swapper)\\n    external\\n    view\\n    override\\n    returns (\\n      bool _isSwapper,\\n      address _swapperAddress,\\n      uint256 _initialization\\n    )\\n  {\\n    _swapperAddress = swapperByName[_swapper];\\n    _initialization = initializationByAddress[_swapperAddress];\\n    _isSwapper = _swapperAddress != address(0);\\n  }\\n\\n  function addSwapper(string memory _name, address _swapper) external override onlyGovernor {\\n    _addSwapper(_name, _swapper);\\n  }\\n\\n  function _addSwapper(string memory _name, address _swapper) internal {\\n    require(bytes(_name).length > 0, 'SwapperRegistry: empty name');\\n    require(_swapper != address(0), 'SwapperRegistry: zero address');\\n    require(!_swappers.contains(_swapper), 'SwapperRegistry: swapper already added');\\n    require(swapperByName[_name] == address(0), 'SwapperRegistry: name taken');\\n    nameByAddress[_swapper] = _name;\\n    swapperByName[_name] = _swapper;\\n    initializationByAddress[_swapper] = block.timestamp;\\n    _swappers.add(_swapper);\\n    emit SwapperAdded(_swapper, _name);\\n  }\\n\\n  function deprecateSwapper(address _swapper) external override onlyGovernor {\\n    _deprecateSwapper(_swapper);\\n  }\\n\\n  function _deprecateSwapper(address _swapper) internal {\\n    require(_swappers.contains(_swapper), 'SwapperRegistry: swapper not added');\\n    deprecatedByAddress[_swapper] = true;\\n    emit SwapperDeprecated(_swapper);\\n  }\\n\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external virtual override onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xddefd8e8157a399092a61a3406a25afe2627d84f29b3fc6abec1c5ed4a7d025c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161186a38038061186a83398101604081905261002f916100c7565b806001600160a01b0381166100a15760405162461bcd60e51b815260206004820152602e60248201527f676f7665726e61626c652f676f7665726e6f722d73686f756c642d6e6f742d6260448201526d652d7a65726f2d6164647265737360901b606482015260840160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055506100f5565b6000602082840312156100d8578081fd5b81516001600160a01b03811681146100ee578182fd5b9392505050565b611766806101046000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a38f3042116100ad578063cbf8e6c411610071578063cbf8e6c4146102e2578063e3056a34146102ea578063e43581b8146102fd578063e58bb6391461031f578063f235757f1461032757600080fd5b8063a38f30421461022e578063a734f06e1461025c578063b64230ba14610277578063bb2983d81461028a578063bbce1bca146102aa57600080fd5b8063519c581e116100f4578063519c581e146101b857806353fc4722146101cd578063567e0b77146101d55780636df00070146101e857806382ce8f911461021b57600080fd5b806305f82669146101265780630c340a24146101445780632db8c1291461016f578063423f2f9c14610184575b600080fd5b61012e61033a565b60405161013b91906115bb565b60405180910390f35b600254610157906001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b61018261017d36600461144c565b6104b0565b005b6101576101923660046114a7565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b6101c06104f3565b60405161013b919061156e565b6101c06105fe565b6101826101e3366004611432565b610705565b61020b6101f6366004611432565b60076020526000908152604090205460ff1681565b604051901515815260200161013b565b6101826102293660046114da565b61073b565b61024e61023c366004611432565b60066020526000908152604090205481565b60405190815260200161013b565b61015773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61020b610285366004611432565b610773565b61029d610298366004611432565b610786565b60405161013b919061161c565b6102bd6102b83660046114a7565b610820565b6040805193151584526001600160a01b0390921660208401529082015260600161013b565b6101c061086b565b600354610157906001600160a01b031681565b61020b61030b366004611432565b6002546001600160a01b0391821691161490565b610182610932565b610182610335366004611432565b610996565b606061034660086109c9565b67ffffffffffffffff81111561036c57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561039f57816020015b606081526020019060019003908161038a5790505b50905060005b6103af60086109c9565b8110156104ac57600460006103c56008846109d3565b6001600160a01b03166001600160a01b0316815260200190815260200160002080546103f0906116ae565b80601f016020809104026020016040519081016040528092919081815260200182805461041c906116ae565b80156104695780601f1061043e57610100808354040283529160200191610469565b820191906000526020600020905b81548152906001019060200180831161044c57829003601f168201915b505050505082828151811061048e57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806104a4906116e9565b9150506103a5565b5090565b6002546001600160a01b031633146104e35760405162461bcd60e51b81526004016104da9061162f565b60405180910390fd5b6104ee8383836109e6565b505050565b60606104ff60086109c9565b67ffffffffffffffff81111561052557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561054e578160200160208202803683370190505b5090506000805b61055f60086109c9565b8110156105f957600760006105756008846109d3565b6001600160a01b0316815260208101919091526040016000205460ff166105e7576105a16008826109d3565b8383815181106105c157634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101526105e4600183611666565b91505b806105f1816116e9565b915050610555565b505090565b606061060a60086109c9565b67ffffffffffffffff81111561063057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610659578160200160208202803683370190505b5090506000805b61066a60086109c9565b8110156105f957600760006106806008846109d3565b6001600160a01b0316815260208101919091526040016000205460ff16156106f3576106ad6008826109d3565b8383815181106106cd57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101526106f0600183611666565b91505b806106fd816116e9565b915050610660565b6002546001600160a01b0316331461072f5760405162461bcd60e51b81526004016104da9061162f565b61073881610b88565b50565b6002546001600160a01b031633146107655760405162461bcd60e51b81526004016104da9061162f565b61076f8282610c36565b5050565b6000610780600883610e8d565b92915050565b6004602052600090815260409020805461079f906116ae565b80601f01602080910402602001604051908101604052809291908181526020018280546107cb906116ae565b80156108185780601f106107ed57610100808354040283529160200191610818565b820191906000526020600020905b8154815290600101906020018083116107fb57829003601f168201915b505050505081565b60008060006005846040516108359190611552565b9081526040805160209281900383019020546001600160a01b031660008181526006909352912054811515969195509350915050565b606061087760086109c9565b67ffffffffffffffff81111561089d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108c6578160200160208202803683370190505b50905060005b6108d660086109c9565b8110156104ac576108e86008826109d3565b82828151811061090857634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528061092a816116e9565b9150506108cc565b6003546001600160a01b0316331461098c5760405162461bcd60e51b815260206004820181905260248201527f676f7665726e61626c652f6f6e6c792d70656e64696e672d676f7665726e6f7260448201526064016104da565b610994610eaf565b565b6002546001600160a01b031633146109c05760405162461bcd60e51b81526004016104da9061162f565b61073881610eff565b6000610780825490565b60006109df8383610fc7565b9392505050565b6001600160a01b038316610a545760405162461bcd60e51b815260206004820152602f60248201527f636f6c6c65637461626c652d647573742f63616e742d73656e642d647573742d60448201526e746f2d7a65726f2d6164647265737360881b60648201526084016104da565b610a5f600083610e8d565b15610ac35760405162461bcd60e51b815260206004820152602e60248201527f636f6c6c65637461626c652d647573742f746f6b656e2d69732d706172742d6f60448201526d198b5d1a194b5c1c9bdd1bd8dbdb60921b60648201526084016104da565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610b24576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610b1e573d6000803e3d6000fd5b50610b38565b610b386001600160a01b0383168483610fff565b604080516001600160a01b038086168252841660208201529081018290527f1e34c1aee8e83c2dcc14c21bb4bfeea7f46c0c998cb797ac7cc4d7a18f5c656b9060600160405180910390a1505050565b610b93600882610e8d565b610bea5760405162461bcd60e51b815260206004820152602260248201527f5377617070657252656769737472793a2073776170706572206e6f7420616464604482015261195960f21b60648201526084016104da565b6001600160a01b038116600081815260076020526040808220805460ff19166001179055517f7ef5c0fcf184cea20ed24dae01c4089fec870a046931503fa41c10f85b0d5db99190a250565b6000825111610c875760405162461bcd60e51b815260206004820152601b60248201527f5377617070657252656769737472793a20656d707479206e616d65000000000060448201526064016104da565b6001600160a01b038116610cdd5760405162461bcd60e51b815260206004820152601d60248201527f5377617070657252656769737472793a207a65726f206164647265737300000060448201526064016104da565b610ce8600882610e8d565b15610d445760405162461bcd60e51b815260206004820152602660248201527f5377617070657252656769737472793a207377617070657220616c726561647960448201526508185919195960d21b60648201526084016104da565b60006001600160a01b0316600583604051610d5f9190611552565b908152604051908190036020019020546001600160a01b031614610dc55760405162461bcd60e51b815260206004820152601b60248201527f5377617070657252656769737472793a206e616d652074616b656e000000000060448201526064016104da565b6001600160a01b03811660009081526004602090815260409091208351610dee928501906112ff565b5080600583604051610e009190611552565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b039485161790559183166000908152600690915220429055610e47600882611051565b50806001600160a01b03167f3b8580d260a5bbf7cfcca55e7df5ab5e9d41c9b4edcb3cbee05861fe8632ca6683604051610e81919061161c565b60405180910390a25050565b6001600160a01b038116600090815260018301602052604081205415156109df565b60038054600280546001600160a01b03199081166001600160a01b038416179091551690556040517f7880f0fcc848e1f26e461654b100a69f8d0641e29aa29f6596c6afadbb36b5ea90600090a1565b6001600160a01b038116610f735760405162461bcd60e51b815260206004820152603560248201527f676f7665726e61626c652f70656e64696e672d676f7665726e6f722d73686f756044820152746c642d6e6f742d62652d7a65726f2d61646472657360581b60648201526084016104da565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def9060200160405180910390a150565b6000826000018281548110610fec57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104ee908490611066565b60006109df836001600160a01b038416611138565b60006110bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111879092919063ffffffff16565b8051909150156104ee57808060200190518101906110d99190611487565b6104ee5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104da565b600081815260018301602052604081205461117f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610780565b506000610780565b6060611196848460008561119e565b949350505050565b6060824710156111ff5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104da565b843b61124d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104da565b600080866001600160a01b031685876040516112699190611552565b60006040518083038185875af1925050503d80600081146112a6576040519150601f19603f3d011682016040523d82523d6000602084013e6112ab565b606091505b50915091506112bb8282866112c6565b979650505050505050565b606083156112d55750816109df565b8251156112e55782518084602001fd5b8160405162461bcd60e51b81526004016104da919061161c565b82805461130b906116ae565b90600052602060002090601f01602090048101928261132d5760008555611373565b82601f1061134657805160ff1916838001178555611373565b82800160010185558215611373579182015b82811115611373578251825591602001919060010190611358565b506104ac9291505b808211156104ac576000815560010161137b565b80356001600160a01b03811681146113a657600080fd5b919050565b600082601f8301126113bb578081fd5b813567ffffffffffffffff808211156113d6576113d661171a565b604051601f8301601f19908116603f011681019082821181831017156113fe576113fe61171a565b81604052838152866020858801011115611416578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611443578081fd5b6109df8261138f565b600080600060608486031215611460578182fd5b6114698461138f565b92506114776020850161138f565b9150604084013590509250925092565b600060208284031215611498578081fd5b815180151581146109df578182fd5b6000602082840312156114b8578081fd5b813567ffffffffffffffff8111156114ce578182fd5b611196848285016113ab565b600080604083850312156114ec578182fd5b823567ffffffffffffffff811115611502578283fd5b61150e858286016113ab565b92505061151d6020840161138f565b90509250929050565b6000815180845261153e81602086016020860161167e565b601f01601f19169290920160200192915050565b6000825161156481846020870161167e565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156115af5783516001600160a01b03168352928401929184019160010161158a565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561160f57603f198886030184526115fd858351611526565b945092850192908501906001016115e1565b5092979650505050505050565b6020815260006109df6020830184611526565b60208082526018908201527f676f7665726e61626c652f6f6e6c792d676f7665726e6f720000000000000000604082015260600190565b6000821982111561167957611679611704565b500190565b60005b83811015611699578181015183820152602001611681565b838111156116a8576000848401525b50505050565b600181811c908216806116c257607f821691505b602082108114156116e357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156116fd576116fd611704565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e8a42c274fcaa2bacf54c4ff00c0a39d6823e1369ba140d9bd40c4f1cb1548f764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063a38f3042116100ad578063cbf8e6c411610071578063cbf8e6c4146102e2578063e3056a34146102ea578063e43581b8146102fd578063e58bb6391461031f578063f235757f1461032757600080fd5b8063a38f30421461022e578063a734f06e1461025c578063b64230ba14610277578063bb2983d81461028a578063bbce1bca146102aa57600080fd5b8063519c581e116100f4578063519c581e146101b857806353fc4722146101cd578063567e0b77146101d55780636df00070146101e857806382ce8f911461021b57600080fd5b806305f82669146101265780630c340a24146101445780632db8c1291461016f578063423f2f9c14610184575b600080fd5b61012e61033a565b60405161013b91906115bb565b60405180910390f35b600254610157906001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b61018261017d36600461144c565b6104b0565b005b6101576101923660046114a7565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b6101c06104f3565b60405161013b919061156e565b6101c06105fe565b6101826101e3366004611432565b610705565b61020b6101f6366004611432565b60076020526000908152604090205460ff1681565b604051901515815260200161013b565b6101826102293660046114da565b61073b565b61024e61023c366004611432565b60066020526000908152604090205481565b60405190815260200161013b565b61015773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61020b610285366004611432565b610773565b61029d610298366004611432565b610786565b60405161013b919061161c565b6102bd6102b83660046114a7565b610820565b6040805193151584526001600160a01b0390921660208401529082015260600161013b565b6101c061086b565b600354610157906001600160a01b031681565b61020b61030b366004611432565b6002546001600160a01b0391821691161490565b610182610932565b610182610335366004611432565b610996565b606061034660086109c9565b67ffffffffffffffff81111561036c57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561039f57816020015b606081526020019060019003908161038a5790505b50905060005b6103af60086109c9565b8110156104ac57600460006103c56008846109d3565b6001600160a01b03166001600160a01b0316815260200190815260200160002080546103f0906116ae565b80601f016020809104026020016040519081016040528092919081815260200182805461041c906116ae565b80156104695780601f1061043e57610100808354040283529160200191610469565b820191906000526020600020905b81548152906001019060200180831161044c57829003601f168201915b505050505082828151811061048e57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806104a4906116e9565b9150506103a5565b5090565b6002546001600160a01b031633146104e35760405162461bcd60e51b81526004016104da9061162f565b60405180910390fd5b6104ee8383836109e6565b505050565b60606104ff60086109c9565b67ffffffffffffffff81111561052557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561054e578160200160208202803683370190505b5090506000805b61055f60086109c9565b8110156105f957600760006105756008846109d3565b6001600160a01b0316815260208101919091526040016000205460ff166105e7576105a16008826109d3565b8383815181106105c157634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101526105e4600183611666565b91505b806105f1816116e9565b915050610555565b505090565b606061060a60086109c9565b67ffffffffffffffff81111561063057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610659578160200160208202803683370190505b5090506000805b61066a60086109c9565b8110156105f957600760006106806008846109d3565b6001600160a01b0316815260208101919091526040016000205460ff16156106f3576106ad6008826109d3565b8383815181106106cd57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101526106f0600183611666565b91505b806106fd816116e9565b915050610660565b6002546001600160a01b0316331461072f5760405162461bcd60e51b81526004016104da9061162f565b61073881610b88565b50565b6002546001600160a01b031633146107655760405162461bcd60e51b81526004016104da9061162f565b61076f8282610c36565b5050565b6000610780600883610e8d565b92915050565b6004602052600090815260409020805461079f906116ae565b80601f01602080910402602001604051908101604052809291908181526020018280546107cb906116ae565b80156108185780601f106107ed57610100808354040283529160200191610818565b820191906000526020600020905b8154815290600101906020018083116107fb57829003601f168201915b505050505081565b60008060006005846040516108359190611552565b9081526040805160209281900383019020546001600160a01b031660008181526006909352912054811515969195509350915050565b606061087760086109c9565b67ffffffffffffffff81111561089d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108c6578160200160208202803683370190505b50905060005b6108d660086109c9565b8110156104ac576108e86008826109d3565b82828151811061090857634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528061092a816116e9565b9150506108cc565b6003546001600160a01b0316331461098c5760405162461bcd60e51b815260206004820181905260248201527f676f7665726e61626c652f6f6e6c792d70656e64696e672d676f7665726e6f7260448201526064016104da565b610994610eaf565b565b6002546001600160a01b031633146109c05760405162461bcd60e51b81526004016104da9061162f565b61073881610eff565b6000610780825490565b60006109df8383610fc7565b9392505050565b6001600160a01b038316610a545760405162461bcd60e51b815260206004820152602f60248201527f636f6c6c65637461626c652d647573742f63616e742d73656e642d647573742d60448201526e746f2d7a65726f2d6164647265737360881b60648201526084016104da565b610a5f600083610e8d565b15610ac35760405162461bcd60e51b815260206004820152602e60248201527f636f6c6c65637461626c652d647573742f746f6b656e2d69732d706172742d6f60448201526d198b5d1a194b5c1c9bdd1bd8dbdb60921b60648201526084016104da565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610b24576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610b1e573d6000803e3d6000fd5b50610b38565b610b386001600160a01b0383168483610fff565b604080516001600160a01b038086168252841660208201529081018290527f1e34c1aee8e83c2dcc14c21bb4bfeea7f46c0c998cb797ac7cc4d7a18f5c656b9060600160405180910390a1505050565b610b93600882610e8d565b610bea5760405162461bcd60e51b815260206004820152602260248201527f5377617070657252656769737472793a2073776170706572206e6f7420616464604482015261195960f21b60648201526084016104da565b6001600160a01b038116600081815260076020526040808220805460ff19166001179055517f7ef5c0fcf184cea20ed24dae01c4089fec870a046931503fa41c10f85b0d5db99190a250565b6000825111610c875760405162461bcd60e51b815260206004820152601b60248201527f5377617070657252656769737472793a20656d707479206e616d65000000000060448201526064016104da565b6001600160a01b038116610cdd5760405162461bcd60e51b815260206004820152601d60248201527f5377617070657252656769737472793a207a65726f206164647265737300000060448201526064016104da565b610ce8600882610e8d565b15610d445760405162461bcd60e51b815260206004820152602660248201527f5377617070657252656769737472793a207377617070657220616c726561647960448201526508185919195960d21b60648201526084016104da565b60006001600160a01b0316600583604051610d5f9190611552565b908152604051908190036020019020546001600160a01b031614610dc55760405162461bcd60e51b815260206004820152601b60248201527f5377617070657252656769737472793a206e616d652074616b656e000000000060448201526064016104da565b6001600160a01b03811660009081526004602090815260409091208351610dee928501906112ff565b5080600583604051610e009190611552565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b039485161790559183166000908152600690915220429055610e47600882611051565b50806001600160a01b03167f3b8580d260a5bbf7cfcca55e7df5ab5e9d41c9b4edcb3cbee05861fe8632ca6683604051610e81919061161c565b60405180910390a25050565b6001600160a01b038116600090815260018301602052604081205415156109df565b60038054600280546001600160a01b03199081166001600160a01b038416179091551690556040517f7880f0fcc848e1f26e461654b100a69f8d0641e29aa29f6596c6afadbb36b5ea90600090a1565b6001600160a01b038116610f735760405162461bcd60e51b815260206004820152603560248201527f676f7665726e61626c652f70656e64696e672d676f7665726e6f722d73686f756044820152746c642d6e6f742d62652d7a65726f2d61646472657360581b60648201526084016104da565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def9060200160405180910390a150565b6000826000018281548110610fec57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104ee908490611066565b60006109df836001600160a01b038416611138565b60006110bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111879092919063ffffffff16565b8051909150156104ee57808060200190518101906110d99190611487565b6104ee5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104da565b600081815260018301602052604081205461117f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610780565b506000610780565b6060611196848460008561119e565b949350505050565b6060824710156111ff5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104da565b843b61124d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104da565b600080866001600160a01b031685876040516112699190611552565b60006040518083038185875af1925050503d80600081146112a6576040519150601f19603f3d011682016040523d82523d6000602084013e6112ab565b606091505b50915091506112bb8282866112c6565b979650505050505050565b606083156112d55750816109df565b8251156112e55782518084602001fd5b8160405162461bcd60e51b81526004016104da919061161c565b82805461130b906116ae565b90600052602060002090601f01602090048101928261132d5760008555611373565b82601f1061134657805160ff1916838001178555611373565b82800160010185558215611373579182015b82811115611373578251825591602001919060010190611358565b506104ac9291505b808211156104ac576000815560010161137b565b80356001600160a01b03811681146113a657600080fd5b919050565b600082601f8301126113bb578081fd5b813567ffffffffffffffff808211156113d6576113d661171a565b604051601f8301601f19908116603f011681019082821181831017156113fe576113fe61171a565b81604052838152866020858801011115611416578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611443578081fd5b6109df8261138f565b600080600060608486031215611460578182fd5b6114698461138f565b92506114776020850161138f565b9150604084013590509250925092565b600060208284031215611498578081fd5b815180151581146109df578182fd5b6000602082840312156114b8578081fd5b813567ffffffffffffffff8111156114ce578182fd5b611196848285016113ab565b600080604083850312156114ec578182fd5b823567ffffffffffffffff811115611502578283fd5b61150e858286016113ab565b92505061151d6020840161138f565b90509250929050565b6000815180845261153e81602086016020860161167e565b601f01601f19169290920160200192915050565b6000825161156481846020870161167e565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156115af5783516001600160a01b03168352928401929184019160010161158a565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561160f57603f198886030184526115fd858351611526565b945092850192908501906001016115e1565b5092979650505050505050565b6020815260006109df6020830184611526565b60208082526018908201527f676f7665726e61626c652f6f6e6c792d676f7665726e6f720000000000000000604082015260600190565b6000821982111561167957611679611704565b500190565b60005b83811015611699578181015183820152602001611681565b838111156116a8576000848401525b50505050565b600181811c908216806116c257607f821691505b602082108114156116e357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156116fd576116fd611704565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e8a42c274fcaa2bacf54c4ff00c0a39d6823e1369ba140d9bd40c4f1cb1548f764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21,
        "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
        "label": "protocolTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)2632_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
        "label": "governor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 135,
        "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4593,
        "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
        "label": "nameByAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 4598,
        "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
        "label": "swapperByName",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 4603,
        "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
        "label": "initializationByAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4608,
        "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
        "label": "deprecatedByAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4611,
        "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
        "label": "_swappers",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)2632_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2632_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2631,
            "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2361_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2361_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2356,
            "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2360,
            "contract": "contracts/SwapperRegistry.sol:SwapperRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}