{
  "address": "0xc9EB13d39bd7fF767bE985f5640a43b07104b40d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mechanicsRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapperRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DustSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "SwapperAndTokenEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "TradeCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "TradeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "TradeExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "TradeExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "TradesCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_newSwapper",
          "type": "string"
        }
      ],
      "name": "TradesSwapperChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTER_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAPPER_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "approvedTokensBySwappers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelAllPending",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_canceledTradesIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancelPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_swapper",
          "type": "string"
        }
      ],
      "name": "changePendingTradesSwapper",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_changedSwapperIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_swapper",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_receivedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "expire",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_freedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isGovernor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mechanic",
          "type": "address"
        }
      ],
      "name": "isMechanic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isMechanic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mechanicsRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "_mechanicRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingTradesById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "pendingTradesIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_pendingIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingTradesIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_pendingIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mechanicsRegistry",
          "type": "address"
        }
      ],
      "name": "setMechanicsRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_checkpoint",
          "type": "uint256"
        }
      ],
      "name": "setSwapperSafetyCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swapperSafetyCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc41d19f4716c3cd5bf186147acaa2c98042f92c535d83233a07c68c4e53a5117",
  "receipt": {
    "to": null,
    "from": "0xB82193725471dC7bfaAB1a3AB93c7b42963F3265",
    "contractAddress": "0xc9EB13d39bd7fF767bE985f5640a43b07104b40d",
    "transactionIndex": 67,
    "gasUsed": "2916658",
    "logsBloom": "0x
    "blockHash": "0x3b464a3091d5e1c9aff952417156d5a4626d833c9345b92e683ef32527b06ccd",
    "transactionHash": "0xc41d19f4716c3cd5bf186147acaa2c98042f92c535d83233a07c68c4e53a5117",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 17048688,
        "transactionHash": "0xc41d19f4716c3cd5bf186147acaa2c98042f92c535d83233a07c68c4e53a5117",
        "address": "0xc9EB13d39bd7fF767bE985f5640a43b07104b40d",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x49e347583a7b9e7f325e8963ee1f94127eba81e401796874b5a22f7c8f9d45f7",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x8eed360e86e418207f03bdbfeed36c97a429754d5b20cf2ba92a94b5e65c2bb7"
        ],
        "data": "0x",
        "logIndex": 166,
        "blockHash": "0x3b464a3091d5e1c9aff952417156d5a4626d833c9345b92e683ef32527b06ccd"
      },
      {
        "transactionIndex": 67,
        "blockNumber": 17048688,
        "transactionHash": "0xc41d19f4716c3cd5bf186147acaa2c98042f92c535d83233a07c68c4e53a5117",
        "address": "0xc9EB13d39bd7fF767bE985f5640a43b07104b40d",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x8eed360e86e418207f03bdbfeed36c97a429754d5b20cf2ba92a94b5e65c2bb7",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3"
        ],
        "data": "0x",
        "logIndex": 167,
        "blockHash": "0x3b464a3091d5e1c9aff952417156d5a4626d833c9345b92e683ef32527b06ccd"
      },
      {
        "transactionIndex": 67,
        "blockNumber": 17048688,
        "transactionHash": "0xc41d19f4716c3cd5bf186147acaa2c98042f92c535d83233a07c68c4e53a5117",
        "address": "0xc9EB13d39bd7fF767bE985f5640a43b07104b40d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8eed360e86e418207f03bdbfeed36c97a429754d5b20cf2ba92a94b5e65c2bb7",
          "0x000000000000000000000000b82193725471dc7bfaab1a3ab93c7b42963f3265",
          "0x000000000000000000000000b82193725471dc7bfaab1a3ab93c7b42963f3265"
        ],
        "data": "0x",
        "logIndex": 168,
        "blockHash": "0x3b464a3091d5e1c9aff952417156d5a4626d833c9345b92e683ef32527b06ccd"
      },
      {
        "transactionIndex": 67,
        "blockNumber": 17048688,
        "transactionHash": "0xc41d19f4716c3cd5bf186147acaa2c98042f92c535d83233a07c68c4e53a5117",
        "address": "0xc9EB13d39bd7fF767bE985f5640a43b07104b40d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3",
          "0x000000000000000000000000b82193725471dc7bfaab1a3ab93c7b42963f3265",
          "0x000000000000000000000000b82193725471dc7bfaab1a3ab93c7b42963f3265"
        ],
        "data": "0x",
        "logIndex": 169,
        "blockHash": "0x3b464a3091d5e1c9aff952417156d5a4626d833c9345b92e683ef32527b06ccd"
      },
      {
        "transactionIndex": 67,
        "blockNumber": 17048688,
        "transactionHash": "0xc41d19f4716c3cd5bf186147acaa2c98042f92c535d83233a07c68c4e53a5117",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b82193725471dc7bfaab1a3ab93c7b42963f3265",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a5caf5c31f5320000000000000000000000000000000000000000000000008aadef0cb0fb55020000000000000000000000000000000000000000000028987709158901ba67d50000000000000000000000000000000000000000000000008aa3925d54c95fd0000000000000000000000000000000000000000000002898771372385dec5d07",
        "logIndex": 170,
        "blockHash": "0x3b464a3091d5e1c9aff952417156d5a4626d833c9345b92e683ef32527b06ccd"
      }
    ],
    "blockNumber": 17048688,
    "cumulativeGasUsed": "16185607",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB82193725471dC7bfaAB1a3AB93c7b42963F3265",
    "0x7a99923aa2efa71178bb11294349ec1f6b23a814",
    "0xcb12Ac8649eA06Cbb15e29032163938D5F86D8ad"
  ],
  "solcInputHash": "d30ebc85527ecdce8d39cd1c4c44d699",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mechanicsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapperRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"SwapperAndTokenEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"TradeCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"TradeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"}],\"name\":\"TradeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"TradeExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"TradesCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newSwapper\",\"type\":\"string\"}],\"name\":\"TradesSwapperChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAPPER_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"approvedTokensBySwappers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAllPending\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_canceledTradesIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_swapper\",\"type\":\"string\"}],\"name\":\"changePendingTradesSwapper\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_changedSwapperIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_swapper\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_freedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanic\",\"type\":\"address\"}],\"name\":\"isMechanic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isMechanic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mechanicsRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicRegistry\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingTradesById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"pendingTradesIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pendingIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTradesIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pendingIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mechanicsRegistry\",\"type\":\"address\"}],\"name\":\"setMechanicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_checkpoint\",\"type\":\"uint256\"}],\"name\":\"setSwapperSafetyCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapperSafetyCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradeFactory/TradeFactory.sol\":\"TradeFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lbertenasco/contract-utils/contracts/utils/CollectableDust.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport '../../interfaces/utils/ICollectableDust.sol';\\n\\nabstract\\ncontract CollectableDust is ICollectableDust {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  EnumerableSet.AddressSet internal protocolTokens;\\n\\n  constructor() {}\\n\\n  function _addProtocolToken(address _token) internal {\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    protocolTokens.add(_token);\\n  }\\n\\n  function _removeProtocolToken(address _token) internal {\\n    require(protocolTokens.contains(_token), 'collectable-dust/token-not-part-of-the-protocol');\\n    protocolTokens.remove(_token);\\n  }\\n\\n  function _sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    require(_to != address(0), 'collectable-dust/cant-send-dust-to-zero-address');\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    if (_token == ETH_ADDRESS) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n    emit DustSent(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xea815f8af6516d2d83d12d5a9bd70f798b38578ed94924a2eb0943a0f93e7803\",\"license\":\"MIT\"},\"@lbertenasco/contract-utils/contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../interfaces/utils/IGovernable.sol';\\n\\ncontract Governable is IGovernable {\\n  address public override governor;\\n  address public override pendingGovernor;\\n\\n  constructor(address _governor) {\\n    require(_governor != address(0), 'governable/governor-should-not-be-zero-address');\\n    governor = _governor;\\n  }\\n\\n  function setPendingGovernor(address _pendingGovernor) external virtual override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external virtual override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  function _setPendingGovernor(address _pendingGovernor) internal {\\n    require(_pendingGovernor != address(0), 'governable/pending-governor-should-not-be-zero-addres');\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(_pendingGovernor);\\n  }\\n\\n  function _acceptGovernor() internal {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit GovernorAccepted();\\n  }\\n\\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\\n    return _account == governor;\\n  }\\n\\n  modifier onlyGovernor {\\n    require(isGovernor(msg.sender), 'governable/only-governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor {\\n    require(msg.sender == pendingGovernor, 'governable/only-pending-governor');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x793f77e9f581d63c8a6e7f64cabef9d10844fce8e7f61a39201664f194d8bdbc\",\"license\":\"MIT\"},\"@lbertenasco/contract-utils/contracts/utils/Machinery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport '../../interfaces/utils/IMachinery.sol';\\nimport '../../interfaces/mechanics/IMechanicsRegistry.sol';\\n\\ncontract Machinery is IMachinery {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  IMechanicsRegistry internal _mechanicsRegistry;\\n\\n  constructor(address __mechanicsRegistry) {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  modifier onlyMechanic {\\n    require(_mechanicsRegistry.isMechanic(msg.sender), 'Machinery: not mechanic');\\n    _;\\n  }\\n\\n  function setMechanicsRegistry(address __mechanicsRegistry) external virtual override {\\n    _setMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  function _setMechanicsRegistry(address __mechanicsRegistry) internal {\\n    _mechanicsRegistry = IMechanicsRegistry(__mechanicsRegistry);\\n  }\\n\\n  // View helpers\\n  function mechanicsRegistry() external view override returns (address _mechanicRegistry) {\\n    return address(_mechanicsRegistry);\\n  }\\n\\n  function isMechanic(address _mechanic) public view override returns (bool _isMechanic) {\\n    return _mechanicsRegistry.isMechanic(_mechanic);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xa24e42137dce45e51a72dfde5bfd4f44abb1d1b9a90cbab43b545c3233c8d86d\",\"license\":\"MIT\"},\"@lbertenasco/contract-utils/interfaces/mechanics/IMechanicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IMechanicsRegistry {\\n    event MechanicAdded(address _mechanic);\\n    event MechanicRemoved(address _mechanic);\\n\\n    function addMechanic(address _mechanic) external;\\n\\n    function removeMechanic(address _mechanic) external;\\n\\n    function mechanics() external view returns (address[] memory _mechanicsList);\\n\\n    function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n\\n}\\n\",\"keccak256\":\"0x6d32691d648433e6739a46f156f279c1e43b9b09432d6feb07fd1b9db04c85d1\",\"license\":\"MIT\"},\"@lbertenasco/contract-utils/interfaces/utils/ICollectableDust.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ICollectableDust {\\n  event DustSent(address _to, address token, uint256 amount);\\n\\n  function sendDust(address _to, address _token, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xbc17399974d1bf723ee94625274454ed028f209e18e2978f3531d12a5a08a10f\",\"license\":\"MIT\"},\"@lbertenasco/contract-utils/interfaces/utils/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address pendingGovernor);\\n  event GovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n  function acceptGovernor() external;\\n\\n  function governor() external view returns (address _governor);\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  function isGovernor(address _account) external view returns (bool _isGovernor);\\n}\\n\",\"keccak256\":\"0xb28881a80a14bd691ef413aea97d65a2a3d4b9a690403c57223d0f56b5656e4e\",\"license\":\"MIT\"},\"@lbertenasco/contract-utils/interfaces/utils/IMachinery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IMachinery {\\n    // View helpers\\n    function mechanicsRegistry() external view returns (address _mechanicsRegistry);\\n    function isMechanic(address mechanic) external view returns (bool _isMechanic);\\n\\n    // Setters\\n    function setMechanicsRegistry(address _mechanicsRegistry) external;\\n\\n}\\n\",\"keccak256\":\"0xa5dd7e40d7414cd417bbd7841b9b4c1a83122bfdf7d961430b49af1b39981003\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '@lbertenasco/contract-utils/contracts/utils/Governable.sol';\\nimport '@lbertenasco/contract-utils/contracts/utils/CollectableDust.sol';\\n\\ninterface ISwapper {\\n  event Swapped(address _receiver, address _tokenIn, address _tokenOut, uint256 _amountIn, uint256 _maxSlippage, uint256 _receivedAmount);\\n\\n  function SLIPPAGE_PRECISION() external view returns (uint256);\\n\\n  function TRADE_FACTORY() external view returns (address);\\n\\n  function swap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage\\n  ) external returns (uint256 _receivedAmount);\\n}\\n\\nabstract contract Swapper is ISwapper, Governable, CollectableDust {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public immutable override SLIPPAGE_PRECISION = 10000; // 1 is 0.0001%, 1_000 is 0.1%\\n  address public immutable override TRADE_FACTORY;\\n\\n  constructor(address _governor, address _tradeFactory) Governable(_governor) {\\n    require(_tradeFactory != address(0), 'Swapper: zero address');\\n    TRADE_FACTORY = _tradeFactory;\\n  }\\n\\n  modifier onlyTradeFactory() {\\n    require(msg.sender == TRADE_FACTORY, 'Swapper: not trade factory');\\n    _;\\n  }\\n\\n  function _assertPreSwap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage\\n  ) internal pure {\\n    require(_receiver != address(0), 'Swapper: zero address');\\n    require(_tokenIn != address(0) && _tokenOut != address(0), 'Swapper: zero address');\\n    require(_amountIn > 0, 'Swapper: zero amount');\\n    require(_maxSlippage > 0, 'Swapper: zero slippage');\\n  }\\n\\n  function _executeSwap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage\\n  ) internal virtual returns (uint256 _receivedAmount);\\n\\n  function swap(\\n    address _receiver,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage\\n  ) external virtual override onlyTradeFactory returns (uint256 _receivedAmount) {\\n    _assertPreSwap(_receiver, _tokenIn, _tokenOut, _amountIn, _maxSlippage);\\n    IERC20(_tokenIn).safeTransferFrom(TRADE_FACTORY, address(this), _amountIn);\\n    _receivedAmount = _executeSwap(_receiver, _tokenIn, _tokenOut, _amountIn, _maxSlippage);\\n    emit Swapped(_receiver, _tokenIn, _tokenOut, _amountIn, _maxSlippage, _receivedAmount);\\n  }\\n\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external virtual override onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xa211c784713162480d1e98f87f954701e90c95577dea0c144478605462e50b5e\",\"license\":\"MIT\"},\"contracts/SwapperRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '@lbertenasco/contract-utils/contracts/utils/CollectableDust.sol';\\nimport '@lbertenasco/contract-utils/contracts/utils/Governable.sol';\\n\\ninterface ISwapperRegistry {\\n  event SwapperAdded(address indexed _swapper, string _name);\\n\\n  event SwapperDeprecated(address indexed _swapper);\\n\\n  function nameByAddress(address) external view returns (string memory);\\n\\n  function swapperByName(string memory) external view returns (address);\\n\\n  function initializationByAddress(address) external view returns (uint256);\\n\\n  function deprecatedByAddress(address) external view returns (bool);\\n\\n  function swappers() external view returns (address[] memory _swappersAddresses);\\n\\n  function swapperNames() external view returns (string[] memory _swappersNames);\\n\\n  function activeSwappers() external view returns (address[] memory _activeSwappers);\\n\\n  function deprecatedSwappers() external view returns (address[] memory _deprecatedSwappers);\\n\\n  function isSwapper(address _swapper) external view returns (bool);\\n\\n  function isSwapper(string memory _swapper)\\n    external\\n    view\\n    returns (\\n      bool _isSwapper,\\n      address _swapperAddress,\\n      uint256 _initialization\\n    );\\n\\n  function addSwapper(string memory _name, address _swapper) external;\\n\\n  function deprecateSwapper(address _swapper) external;\\n}\\n\\ncontract SwapperRegistry is ISwapperRegistry, CollectableDust, Governable {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  mapping(address => string) public override nameByAddress;\\n  mapping(string => address) public override swapperByName;\\n  mapping(address => uint256) public override initializationByAddress;\\n  mapping(address => bool) public override deprecatedByAddress;\\n  EnumerableSet.AddressSet internal _swappers;\\n\\n  constructor(address _governance) Governable(_governance) {}\\n\\n  function swappers() external view override returns (address[] memory _swappersAddresses) {\\n    _swappersAddresses = new address[](_swappers.length());\\n    for (uint256 i = 0; i < _swappers.length(); i++) {\\n      _swappersAddresses[i] = _swappers.at(i);\\n    }\\n  }\\n\\n  function swapperNames() external view override returns (string[] memory _swappersNames) {\\n    _swappersNames = new string[](_swappers.length());\\n    for (uint256 i = 0; i < _swappers.length(); i++) {\\n      _swappersNames[i] = nameByAddress[_swappers.at(i)];\\n    }\\n  }\\n\\n  function activeSwappers() external view override returns (address[] memory _activeSwappers) {\\n    _activeSwappers = new address[](_swappers.length());\\n    uint256 _totalActive = 0;\\n    for (uint256 i = 0; i < _swappers.length(); i++) {\\n      if (!deprecatedByAddress[_swappers.at(i)]) {\\n        _activeSwappers[_totalActive] = _swappers.at(i);\\n        _totalActive += 1;\\n      }\\n    }\\n  }\\n\\n  function deprecatedSwappers() external view override returns (address[] memory _deprecatedSwappers) {\\n    _deprecatedSwappers = new address[](_swappers.length());\\n    uint256 _totalDeprecated = 0;\\n    for (uint256 i = 0; i < _swappers.length(); i++) {\\n      if (deprecatedByAddress[_swappers.at(i)]) {\\n        _deprecatedSwappers[_totalDeprecated] = _swappers.at(i);\\n        _totalDeprecated += 1;\\n      }\\n    }\\n  }\\n\\n  function isSwapper(address _swapper) external view override returns (bool) {\\n    return _swappers.contains(_swapper);\\n  }\\n\\n  function isSwapper(string memory _swapper)\\n    external\\n    view\\n    override\\n    returns (\\n      bool _isSwapper,\\n      address _swapperAddress,\\n      uint256 _initialization\\n    )\\n  {\\n    _swapperAddress = swapperByName[_swapper];\\n    _initialization = initializationByAddress[_swapperAddress];\\n    _isSwapper = _swapperAddress != address(0);\\n  }\\n\\n  function addSwapper(string memory _name, address _swapper) external override onlyGovernor {\\n    _addSwapper(_name, _swapper);\\n  }\\n\\n  function _addSwapper(string memory _name, address _swapper) internal {\\n    require(bytes(_name).length > 0, 'SwapperRegistry: empty name');\\n    require(_swapper != address(0), 'SwapperRegistry: zero address');\\n    require(!_swappers.contains(_swapper), 'SwapperRegistry: swapper already added');\\n    require(swapperByName[_name] == address(0), 'SwapperRegistry: name taken');\\n    nameByAddress[_swapper] = _name;\\n    swapperByName[_name] = _swapper;\\n    initializationByAddress[_swapper] = block.timestamp;\\n    _swappers.add(_swapper);\\n    emit SwapperAdded(_swapper, _name);\\n  }\\n\\n  function deprecateSwapper(address _swapper) external override onlyGovernor {\\n    _deprecateSwapper(_swapper);\\n  }\\n\\n  function _deprecateSwapper(address _swapper) internal {\\n    require(_swappers.contains(_swapper), 'SwapperRegistry: swapper not added');\\n    deprecatedByAddress[_swapper] = true;\\n    emit SwapperDeprecated(_swapper);\\n  }\\n\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external virtual override onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xddefd8e8157a399092a61a3406a25afe2627d84f29b3fc6abec1c5ed4a7d025c\",\"license\":\"MIT\"},\"contracts/TradeFactory/TradeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport '@lbertenasco/contract-utils/contracts/utils/CollectableDust.sol';\\nimport '@lbertenasco/contract-utils/contracts/utils/Governable.sol';\\n\\nimport './TradeFactoryPositionsHandler.sol';\\nimport './TradeFactoryExecutor.sol';\\n\\ninterface ITradeFactory is ITradeFactoryExecutor, ITradeFactoryPositionsHandler {}\\n\\ncontract TradeFactory is Governable, TradeFactoryPositionsHandler, TradeFactoryExecutor, ITradeFactory, CollectableDust {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  constructor(\\n    address _governor,\\n    address _mechanicsRegistry,\\n    address _swapperRegistry\\n  ) Governable(_governor) TradeFactoryExecutor(_mechanicsRegistry) TradeFactoryPositionsHandler(_swapperRegistry) {}\\n\\n  // Collectable Dust\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external virtual override onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x54ff440b1a66ced92d85d4c625ae40c29baf19e0a3c59b243abf56db6daadefe\",\"license\":\"MIT\"},\"contracts/TradeFactory/TradeFactoryExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport '@lbertenasco/contract-utils/contracts/utils/Governable.sol';\\nimport '@lbertenasco/contract-utils/contracts/utils/Machinery.sol';\\n\\nimport '../Swapper.sol';\\nimport './TradeFactoryPositionsHandler.sol';\\n\\ninterface ITradeFactoryExecutor {\\n  event TradeExpired(uint256 indexed _id);\\n\\n  event TradeExecuted(uint256 indexed _id, uint256 _receivedAmount);\\n\\n  event SwapperAndTokenEnabled(address indexed _swapper, address _token);\\n\\n  function approvedTokensBySwappers(address _swapper) external view returns (address[] memory _tokens);\\n\\n  function execute(uint256 _id) external returns (uint256 _receivedAmount);\\n\\n  function expire(uint256 _id) external returns (uint256 _freedAmount);\\n}\\n\\nabstract contract TradeFactoryExecutor is ITradeFactoryExecutor, Governable, TradeFactoryPositionsHandler, Machinery {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  constructor(address _mechanicsRegistry) Machinery(_mechanicsRegistry) {}\\n\\n  mapping(address => EnumerableSet.AddressSet) internal _approvedTokensBySwappers;\\n\\n  function approvedTokensBySwappers(address _swapper) external view override returns (address[] memory _tokens) {\\n    _tokens = new address[](_approvedTokensBySwappers[_swapper].length());\\n    for (uint256 i = 0; i < _approvedTokensBySwappers[_swapper].length(); i++) {\\n      _tokens[i] = _approvedTokensBySwappers[_swapper].at(i);\\n    }\\n  }\\n\\n  // Machinery\\n  function setMechanicsRegistry(address _mechanicsRegistry) external virtual override onlyGovernor {\\n    _setMechanicsRegistry(_mechanicsRegistry);\\n  }\\n\\n  // TradeFactoryExecutor\\n\\n  function execute(uint256 _id) external override onlyMechanic returns (uint256 _receivedAmount) {\\n    require(_pendingTradesIds.contains(_id), 'TradeFactory: trade not pending');\\n    Trade memory _trade = pendingTradesById[_id];\\n    require(block.timestamp <= _trade._deadline, 'TradeFactory: trade has expired');\\n    require(!ISwapperRegistry(SWAPPER_REGISTRY).deprecatedByAddress(_trade._swapper), 'TradeFactory: deprecated swapper');\\n    if (!_approvedTokensBySwappers[_trade._swapper].contains(_trade._tokenIn)) {\\n      _enableSwapperToken(_trade._swapper, _trade._tokenIn);\\n    }\\n    IERC20(_trade._tokenIn).safeTransferFrom(_trade._strategy, address(this), _trade._amountIn);\\n    _receivedAmount = ISwapper(_trade._swapper).swap(_trade._strategy, _trade._tokenIn, _trade._tokenOut, _trade._amountIn, _trade._maxSlippage);\\n    _removePendingTrade(_trade._strategy, _id);\\n    emit TradeExecuted(_id, _receivedAmount);\\n  }\\n\\n  function expire(uint256 _id) external override onlyMechanic returns (uint256 _freedAmount) {\\n    require(_pendingTradesIds.contains(_id), 'TradeFactory: trade not pending');\\n    Trade memory _trade = pendingTradesById[_id];\\n    require(_trade._deadline <= block.timestamp, 'TradeFactory: trade not expired');\\n    _freedAmount = _trade._amountIn;\\n    // We have to take tokens from strategy, to decrease the allowance\\n    IERC20(_trade._tokenIn).safeTransferFrom(_trade._strategy, address(this), _trade._amountIn);\\n    // Send tokens back to strategy\\n    IERC20(_trade._tokenIn).safeTransfer(_trade._strategy, _trade._amountIn);\\n    // Remove trade\\n    _removePendingTrade(_trade._strategy, _id);\\n    emit TradeExpired(_id);\\n  }\\n\\n  function _enableSwapperToken(address _swapper, address _token) internal {\\n    IERC20(_token).safeApprove(_swapper, type(uint256).max);\\n    _approvedTokensBySwappers[_swapper].add(_token);\\n    emit SwapperAndTokenEnabled(_swapper, _token);\\n  }\\n}\\n\",\"keccak256\":\"0x54fded92a54fb8ca918d2bd6fec6d9e676b867600c2cc8fde257aa75fb7cbc62\",\"license\":\"MIT\"},\"contracts/TradeFactory/TradeFactoryPositionsHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@lbertenasco/contract-utils/contracts/utils/Governable.sol';\\nimport '../SwapperRegistry.sol';\\n\\ninterface ITradeFactoryPositionsHandler {\\n  struct Trade {\\n    uint256 _id;\\n    address _strategy;\\n    address _swapper;\\n    address _tokenIn;\\n    address _tokenOut;\\n    uint256 _amountIn;\\n    uint256 _maxSlippage;\\n    uint256 _deadline;\\n  }\\n\\n  event TradeCreated(\\n    uint256 indexed _id,\\n    address _strategy,\\n    address _swapper,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage,\\n    uint256 _deadline\\n  );\\n\\n  event TradeCanceled(address indexed _strategy, uint256 indexed _id);\\n\\n  event TradesCanceled(address indexed _strategy, uint256[] _ids);\\n\\n  event TradesSwapperChanged(address indexed _strategy, uint256[] _ids, string _newSwapper);\\n\\n  function pendingTradesById(uint256)\\n    external\\n    view\\n    returns (\\n      uint256 _id,\\n      address _strategy,\\n      address _swapper,\\n      address _tokenIn,\\n      address _tokenOut,\\n      uint256 _amountIn,\\n      uint256 _maxSlippage,\\n      uint256 _deadline\\n    );\\n\\n  function pendingTradesIds() external view returns (uint256[] memory _pendingIds);\\n\\n  function pendingTradesIds(address _strategy) external view returns (uint256[] memory _pendingIds);\\n\\n  function swapperSafetyCheckpoint(address) external view returns (uint256);\\n\\n  function SWAPPER_REGISTRY() external view returns (address);\\n\\n  function setSwapperSafetyCheckpoint(uint256 _checkpoint) external;\\n\\n  function create(\\n    string memory _swapper,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage,\\n    uint256 _deadline\\n  ) external returns (uint256 _id);\\n\\n  function cancelPending(uint256 _id) external;\\n\\n  function cancelAllPending() external returns (uint256[] memory _canceledTradesIds);\\n\\n  function changePendingTradesSwapper(string memory _swapper) external returns (uint256[] memory _changedSwapperIds);\\n}\\n\\nabstract contract TradeFactoryPositionsHandler is ITradeFactoryPositionsHandler, AccessControl, Governable {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  bytes32 public constant STRATEGY = keccak256('STRATEGY');\\n  bytes32 public constant STRATEGY_ADMIN = keccak256('STRATEGY_ADMIN');\\n  bytes32 public constant MASTER_ADMIN = keccak256('MASTER_ADMIN');\\n\\n  uint256 private _tradeCounter = 1;\\n\\n  mapping(uint256 => Trade) public override pendingTradesById;\\n\\n  mapping(address => uint256) public override swapperSafetyCheckpoint;\\n\\n  EnumerableSet.UintSet internal _pendingTradesIds;\\n\\n  mapping(address => EnumerableSet.UintSet) internal _pendingTradesByOwner;\\n\\n  address public immutable override SWAPPER_REGISTRY;\\n\\n  constructor(address _swapperRegistry) {\\n    SWAPPER_REGISTRY = _swapperRegistry;\\n    _setRoleAdmin(STRATEGY, STRATEGY_ADMIN);\\n    _setRoleAdmin(STRATEGY_ADMIN, MASTER_ADMIN);\\n    _setupRole(STRATEGY_ADMIN, governor);\\n    _setupRole(MASTER_ADMIN, governor);\\n  }\\n\\n  function pendingTradesIds() external view override returns (uint256[] memory _pendingIds) {\\n    _pendingIds = new uint256[](_pendingTradesIds.length());\\n    for (uint256 i; i < _pendingTradesIds.length(); i++) {\\n      _pendingIds[i] = _pendingTradesIds.at(i);\\n    }\\n  }\\n\\n  function pendingTradesIds(address _strategy) external view override returns (uint256[] memory _pendingIds) {\\n    _pendingIds = new uint256[](_pendingTradesByOwner[_strategy].length());\\n    for (uint256 i; i < _pendingTradesByOwner[_strategy].length(); i++) {\\n      _pendingIds[i] = _pendingTradesByOwner[_strategy].at(i);\\n    }\\n  }\\n\\n  function create(\\n    string memory _swapper,\\n    address _tokenIn,\\n    address _tokenOut,\\n    uint256 _amountIn,\\n    uint256 _maxSlippage,\\n    uint256 _deadline\\n  ) external override onlyRole(STRATEGY) returns (uint256 _id) {\\n    (bool _existsSwapper, address _swapperAddress, uint256 _swapperInitialization) = SwapperRegistry(SWAPPER_REGISTRY).isSwapper(_swapper);\\n    require(_existsSwapper, 'TradeFactory: invalid swapper');\\n    require(_swapperInitialization <= swapperSafetyCheckpoint[msg.sender], 'TradeFactory: initialization greater than checkpoint');\\n    require(_tokenIn != address(0) && _tokenOut != address(0), 'TradeFactory: zero address');\\n    require(_amountIn > 0, 'TradeFactory: zero amount');\\n    require(_maxSlippage > 0, 'TradeFactory: zero slippage');\\n    require(block.timestamp < _deadline, 'TradeFactory: deadline too soon');\\n    _id = _tradeCounter;\\n    Trade memory _trade = Trade(_tradeCounter, msg.sender, _swapperAddress, _tokenIn, _tokenOut, _amountIn, _maxSlippage, _deadline);\\n    pendingTradesById[_trade._id] = _trade;\\n    _pendingTradesByOwner[msg.sender].add(_trade._id);\\n    _pendingTradesIds.add(_trade._id);\\n    _tradeCounter += 1;\\n    emit TradeCreated(\\n      _trade._id,\\n      _trade._strategy,\\n      _trade._swapper,\\n      _trade._tokenIn,\\n      _trade._tokenOut,\\n      _trade._amountIn,\\n      _trade._maxSlippage,\\n      _trade._deadline\\n    );\\n  }\\n\\n  function cancelPending(uint256 _id) external override onlyRole(STRATEGY) {\\n    require(_pendingTradesIds.contains(_id), 'TradeFactory: trade not pending');\\n    require(pendingTradesById[_id]._strategy == msg.sender, 'TradeFactory: does not own trade');\\n    Trade memory _trade = pendingTradesById[_id];\\n    _removePendingTrade(_trade._strategy, _id);\\n    emit TradeCanceled(msg.sender, _id);\\n  }\\n\\n  function cancelAllPending() external override onlyRole(STRATEGY) returns (uint256[] memory _canceledTradesIds) {\\n    require(_pendingTradesByOwner[msg.sender].length() > 0, 'TradeFactory: no trades pending from strategy');\\n    _canceledTradesIds = new uint256[](_pendingTradesByOwner[msg.sender].length());\\n    for (uint256 i; i < _pendingTradesByOwner[msg.sender].length(); i++) {\\n      _canceledTradesIds[i] = _pendingTradesByOwner[msg.sender].at(i);\\n    }\\n    for (uint256 i; i < _canceledTradesIds.length; i++) {\\n      _removePendingTrade(msg.sender, _canceledTradesIds[i]);\\n    }\\n    emit TradesCanceled(msg.sender, _canceledTradesIds);\\n  }\\n\\n  function changePendingTradesSwapper(string memory _swapper)\\n    external\\n    override\\n    onlyRole(STRATEGY)\\n    returns (uint256[] memory _changedSwapperIds)\\n  {\\n    (bool _existsSwapper, address _swapperAddress, uint256 _swapperInitialization) = SwapperRegistry(SWAPPER_REGISTRY).isSwapper(_swapper);\\n    require(_existsSwapper, 'TradeFactory: invalid swapper');\\n    require(_swapperInitialization <= swapperSafetyCheckpoint[msg.sender], 'TradeFactory: initialization greater than checkpoint');\\n    _changedSwapperIds = new uint256[](_pendingTradesByOwner[msg.sender].length());\\n    for (uint256 i; i < _pendingTradesByOwner[msg.sender].length(); i++) {\\n      pendingTradesById[_pendingTradesByOwner[msg.sender].at(i)]._swapper = _swapperAddress;\\n      _changedSwapperIds[i] = _pendingTradesByOwner[msg.sender].at(i);\\n    }\\n    emit TradesSwapperChanged(msg.sender, _changedSwapperIds, _swapper);\\n  }\\n\\n  function setSwapperSafetyCheckpoint(uint256 _checkpoint) external override onlyRole(STRATEGY) {\\n    require(_checkpoint <= block.timestamp, 'TradeFactory: invalid checkpoint');\\n    swapperSafetyCheckpoint[msg.sender] = _checkpoint;\\n  }\\n\\n  function _removePendingTrade(address _strategy, uint256 _id) internal {\\n    _pendingTradesByOwner[_strategy].remove(_id);\\n    _pendingTradesIds.remove(_id);\\n    delete pendingTradesById[_id];\\n  }\\n}\\n\",\"keccak256\":\"0xa4b5fb99d34709496519c99fb32f67f72a445c5fee2c2e59e75038cc578cf8d8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260016003553480156200001657600080fd5b506040516200342e3803806200342e8339810160408190526200003991620002de565b818082856001600160a01b038116620000af5760405162461bcd60e51b815260206004820152602e60248201527f676f7665726e61626c652f676f7665726e6f722d73686f756c642d6e6f742d6260448201526d652d7a65726f2d6164647265737360901b606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055606081901b6001600160601b0319166080526200011c7f49e347583a7b9e7f325e8963ee1f94127eba81e401796874b5a22f7c8f9d45f7600080516020620033ee833981519152620001bd565b62000146600080516020620033ee8339815191526000805160206200340e833981519152620001bd565b6001546200016e90600080516020620033ee833981519152906001600160a01b031662000211565b60015462000196906000805160206200340e833981519152906001600160a01b031662000211565b50600980546001600160a01b0319166001600160a01b038316179055505050505062000327565b600082815260208190526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b6200021d828262000221565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200021d576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200027d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b0381168114620002d957600080fd5b919050565b600080600060608486031215620002f3578283fd5b620002fe84620002c1565b92506200030e60208501620002c1565b91506200031e60408501620002c1565b90509250925092565b60805160601c6130936200035b6000396000818161049401528181610799015281816115bd0152611b0f01526130936000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638992929c1161011a578063e2f15967116100ad578063e454a5ed1161007c578063e454a5ed14610544578063e58bb6391461056b578063ef47da6d14610573578063f235757f14610586578063fe0d94c11461059957600080fd5b8063e2f15967146104dc578063e3056a34146104ef578063e42e54bf14610502578063e43581b81461052257600080fd5b8063a734f06e116100e9578063a734f06e14610474578063b3b48afb1461048f578063bf81bf43146104b6578063d547741f146104c957600080fd5b80638992929c1461042a57806391d1485414610451578063a217fddf14610464578063a2c6f1741461046c57600080fd5b806329866a67116101925780635588fdf1116101615780635588fdf1146103405780635877e98e1461035357806359cd24241461040457806365834acc1461041757600080fd5b806329866a67146102f25780632db8c129146103075780632f2ff15d1461031a57806336568abe1461032d57600080fd5b80630c340a24116101ce5780630c340a241461027e5780631078f388146102a9578063185025ef146102ba578063248a9ca3146102cf57600080fd5b806301ffc9a71461020057806307dc0772146102285780630886120814610248578063099c591f1461025d575b600080fd5b61021361020e366004612c07565b6105ac565b60405190151581526020015b60405180910390f35b61023b610236366004612b0b565b6105e3565b60405161021f9190612ded565b61025b610256366004612bc0565b6106f6565b005b61027061026b366004612c62565b610777565b60405190815260200161021f565b600154610291906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b6009546001600160a01b0316610291565b61027060008051602061303e83398151915281565b6102706102dd366004612bc0565b60009081526020819052604090206001015490565b6102fa610c83565b60405161021f9190612e3a565b61025b610315366004612b27565b610e91565b61025b610328366004612bd8565b610ecb565b61025b61033b366004612bd8565b610ef1565b61025b61034e366004612bc0565b610f6f565b6103b6610361366004612bc0565b60046020819052600091825260409091208054600182015460028301546003840154948401546005850154600686015460079096015494966001600160a01b0394851696938516959085169490921692909188565b604080519889526001600160a01b0397881660208a01529587169588019590955292851660608701529316608085015260a084019290925260c083019190915260e08201526101000161021f565b6102fa610412366004612b0b565b6110cf565b610213610425366004612b0b565b6111cf565b6102707f8eed360e86e418207f03bdbfeed36c97a429754d5b20cf2ba92a94b5e65c2bb781565b61021361045f366004612bd8565b61124d565b610270600081565b6102fa611276565b61029173eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6102917f000000000000000000000000000000000000000000000000000000000000000081565b6102706104c4366004612bc0565b611334565b61025b6104d7366004612bd8565b611575565b6102fa6104ea366004612c2f565b61159b565b600254610291906001600160a01b031681565b610270610510366004612b0b565b60056020526000908152604090205481565b610213610530366004612b0b565b6001546001600160a01b0391821691161490565b6102707f0b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d381565b61025b611858565b61025b610581366004612b0b565b6118bc565b61025b610594366004612b0b565b611907565b6102706105a7366004612bc0565b61193a565b60006001600160e01b03198216637965db0b60e01b14806105dd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0381166000908152600a6020526040902060609061060790611d47565b67ffffffffffffffff81111561062d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610656578160200160208202803683370190505b50905060005b6001600160a01b0383166000908152600a6020526040902061067d90611d47565b8110156106f0576001600160a01b0383166000908152600a602052604090206106a69082611d51565b8282815181106106c657634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806106e881612fe1565b91505061065c565b50919050565b60008051602061303e83398151915261070f8133611d64565b428211156107645760405162461bcd60e51b815260206004820181905260248201527f5472616465466163746f72793a20696e76616c696420636865636b706f696e7460448201526064015b60405180910390fd5b5033600090815260056020526040902055565b600060008051602061303e8339815191526107928133611d64565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bbce1bca8c6040518263ffffffff1660e01b81526004016107e39190612e7b565b60606040518083038186803b1580156107fb57600080fd5b505afa15801561080f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108339190612b81565b925092509250826108865760405162461bcd60e51b815260206004820152601d60248201527f5472616465466163746f72793a20696e76616c69642073776170706572000000604482015260640161075b565b336000908152600560205260409020548111156108b55760405162461bcd60e51b815260040161075b90612efc565b6001600160a01b038a16158015906108d557506001600160a01b03891615155b6109215760405162461bcd60e51b815260206004820152601a60248201527f5472616465466163746f72793a207a65726f2061646472657373000000000000604482015260640161075b565b600088116109715760405162461bcd60e51b815260206004820152601960248201527f5472616465466163746f72793a207a65726f20616d6f756e7400000000000000604482015260640161075b565b600087116109c15760405162461bcd60e51b815260206004820152601b60248201527f5472616465466163746f72793a207a65726f20736c6970706167650000000000604482015260640161075b565b854210610a105760405162461bcd60e51b815260206004820152601f60248201527f5472616465466163746f72793a20646561646c696e6520746f6f20736f6f6e00604482015260640161075b565b600354945060006040518061010001604052806003548152602001336001600160a01b03168152602001846001600160a01b031681526020018c6001600160a01b031681526020018b6001600160a01b031681526020018a81526020018981526020018881525090508060046000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005015560c0820151816006015560e08201518160070155905050610bab816000015160086000336001600160a01b03166001600160a01b03168152602001908152602001600020611dc890919063ffffffff16565b508051610bba90600690611dc8565b50600160036000828254610bce9190612f50565b9091555050805160208201516040808401516060850151608086015160a087015160c088015160e089015195517f399699ab6f1401e7784608cbdabe944658876a522eb163c69fd166dbf2776c4f97610c6c97909695949392916001600160a01b03978816815295871660208701529386166040860152919094166060840152608083019390935260a082019290925260c081019190915260e00190565b60405180910390a250505050509695505050505050565b606060008051602061303e833981519152610c9e8133611d64565b336000908152600860205260408120610cb690611d47565b11610d195760405162461bcd60e51b815260206004820152602d60248201527f5472616465466163746f72793a206e6f207472616465732070656e64696e672060448201526c66726f6d20737472617465677960981b606482015260840161075b565b336000908152600860205260409020610d3190611d47565b67ffffffffffffffff811115610d5757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d80578160200160208202803683370190505b50915060005b336000908152600860205260409020610d9e90611d47565b811015610dfb57336000908152600860205260409020610dbe9082611d51565b838281518110610dde57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610df381612fe1565b915050610d86565b5060005b8251811015610e4b57610e3933848381518110610e2c57634e487b7160e01b600052603260045260246000fd5b6020026020010151611dd4565b80610e4381612fe1565b915050610dff565b50336001600160a01b03167fbc02525bfba972df6ef3d6d34e6f4773de0e098177c254a62a4926ec94fdaea683604051610e859190612e3a565b60405180910390a25090565b6001546001600160a01b03163314610ebb5760405162461bcd60e51b815260040161075b90612e8e565b610ec6838383611e5f565b505050565b600082815260208190526040902060010154610ee78133611d64565b610ec68383612001565b6001600160a01b0381163314610f615760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161075b565b610f6b8282612085565b5050565b60008051602061303e833981519152610f888133611d64565b610f936006836120ea565b610faf5760405162461bcd60e51b815260040161075b90612ec5565b6000828152600460205260409020600101546001600160a01b031633146110185760405162461bcd60e51b815260206004820181905260248201527f5472616465466163746f72793a20646f6573206e6f74206f776e207472616465604482015260640161075b565b6000828152600460208181526040928390208351610100810185528154815260018201546001600160a01b039081169382018490526002830154811695820195909552600382015485166060820152928101549093166080830152600583015460a0830152600683015460c083015260079092015460e08201529061109d9084611dd4565b604051839033907fc036ffe8eab201772430a4259f57e5ed5cd8fc42ecc80be53bb03012d983aea090600090a3505050565b6001600160a01b03811660009081526008602052604090206060906110f390611d47565b67ffffffffffffffff81111561111957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611142578160200160208202803683370190505b50905060005b6001600160a01b038316600090815260086020526040902061116990611d47565b8110156106f0576001600160a01b03831660009081526008602052604090206111929082611d51565b8282815181106111b257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806111c781612fe1565b915050611148565b600954604051631960d2b360e21b81526001600160a01b03838116600483015260009216906365834acc9060240160206040518083038186803b15801561121557600080fd5b505afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190612b67565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606112826006611d47565b67ffffffffffffffff8111156112a857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112d1578160200160208202803683370190505b50905060005b6112e16006611d47565b811015611330576112f3600682611d51565b82828151811061131357634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061132881612fe1565b9150506112d7565b5090565b600954604051631960d2b360e21b81523360048201526000916001600160a01b0316906365834acc9060240160206040518083038186803b15801561137857600080fd5b505afa15801561138c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b09190612b67565b6113f65760405162461bcd60e51b81526020600482015260176024820152764d616368696e6572793a206e6f74206d656368616e696360481b604482015260640161075b565b6114016006836120ea565b61141d5760405162461bcd60e51b815260040161075b90612ec5565b6000828152600460208181526040928390208351610100810185528154815260018201546001600160a01b0390811693820193909352600282015483169481019490945260038101548216606085015291820154166080830152600581015460a0830152600681015460c08301526007015460e082018190524210156114e55760405162461bcd60e51b815260206004820152601f60248201527f5472616465466163746f72793a207472616465206e6f74206578706972656400604482015260640161075b565b60a08101516020820151606083015191935061150c916001600160a01b0316903085612102565b61153681602001518260a0015183606001516001600160a01b03166121739092919063ffffffff16565b611544816020015184611dd4565b60405183907fcfbcbfeee9ccb107958511dda6b71f9144382df7a0799b7a0aad567f2b6fbce390600090a250919050565b6000828152602081905260409020600101546115918133611d64565b610ec68383612085565b606060008051602061303e8339815191526115b68133611d64565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bbce1bca876040518263ffffffff1660e01b81526004016116079190612e7b565b60606040518083038186803b15801561161f57600080fd5b505afa158015611633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116579190612b81565b925092509250826116aa5760405162461bcd60e51b815260206004820152601d60248201527f5472616465466163746f72793a20696e76616c69642073776170706572000000604482015260640161075b565b336000908152600560205260409020548111156116d95760405162461bcd60e51b815260040161075b90612efc565b3360009081526008602052604090206116f190611d47565b67ffffffffffffffff81111561171757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611740578160200160208202803683370190505b50945060005b33600090815260086020526040902061175e90611d47565b81101561180b5733600090815260086020526040812084916004916117839085611d51565b81526020808201929092526040908101600090812060020180546001600160a01b0319166001600160a01b039590951694909417909355338352600890915290206117ce9082611d51565b8682815181106117ee57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061180381612fe1565b915050611746565b50336001600160a01b03167f962eed4b6e6f9f8514a4e0c50c2483216d4abee4d7649e63b3766dd9c1ab4ae78688604051611847929190612e4d565b60405180910390a250505050919050565b6002546001600160a01b031633146118b25760405162461bcd60e51b815260206004820181905260248201527f676f7665726e61626c652f6f6e6c792d70656e64696e672d676f7665726e6f72604482015260640161075b565b6118ba6121a3565b565b6001546001600160a01b031633146118e65760405162461bcd60e51b815260040161075b90612e8e565b600980546001600160a01b0319166001600160a01b03831617905550565b50565b6001546001600160a01b031633146119315760405162461bcd60e51b815260040161075b90612e8e565b611904816121f3565b600954604051631960d2b360e21b81523360048201526000916001600160a01b0316906365834acc9060240160206040518083038186803b15801561197e57600080fd5b505afa158015611992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b69190612b67565b6119fc5760405162461bcd60e51b81526020600482015260176024820152764d616368696e6572793a206e6f74206d656368616e696360481b604482015260640161075b565b611a076006836120ea565b611a235760405162461bcd60e51b815260040161075b90612ec5565b6000828152600460208181526040928390208351610100810185528154815260018201546001600160a01b0390811693820193909352600282015483169481019490945260038101548216606085015291820154166080830152600581015460a0830152600681015460c08301526007015460e08201819052421115611aeb5760405162461bcd60e51b815260206004820152601f60248201527f5472616465466163746f72793a20747261646520686173206578706972656400604482015260640161075b565b60408181015190516306df000760e41b81526001600160a01b0391821660048201527f000000000000000000000000000000000000000000000000000000000000000090911690636df000709060240160206040518083038186803b158015611b5357600080fd5b505afa158015611b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8b9190612b67565b15611bd85760405162461bcd60e51b815260206004820181905260248201527f5472616465466163746f72793a20646570726563617465642073776170706572604482015260640161075b565b60608101516040808301516001600160a01b03166000908152600a60205220611c00916122bb565b611c1657611c16816040015182606001516122dd565b611c428160200151308360a0015184606001516001600160a01b0316612102909392919063ffffffff16565b60408082015160208301516060840151608085015160a086015160c087015195516371a1ff0960e11b81526001600160a01b0394851660048201529284166024840152908316604483015260648201526084810193909352169063e343fe129060a401602060405180830381600087803b158015611cbf57600080fd5b505af1158015611cd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf79190612cde565b9150611d07816020015184611dd4565b827f589de19ac049f650e30154ebb6ba9be12c5394027648b0ff506705d197ec708683604051611d3991815260200190565b60405180910390a250919050565b60006105dd825490565b6000611d5d838361235a565b9392505050565b611d6e828261124d565b610f6b57611d86816001600160a01b03166014612392565b611d91836020612392565b604051602001611da2929190612d78565b60408051601f198184030181529082905262461bcd60e51b825261075b91600401612e7b565b6000611d5d8383612574565b6001600160a01b0382166000908152600860205260409020611df690826125c3565b50611e026006826125c3565b50600090815260046020819052604082208281556001810180546001600160a01b03199081169091556002820180548216905560038201805482169055918101805490921690915560058101829055600681018290556007015550565b6001600160a01b038316611ecd5760405162461bcd60e51b815260206004820152602f60248201527f636f6c6c65637461626c652d647573742f63616e742d73656e642d647573742d60448201526e746f2d7a65726f2d6164647265737360881b606482015260840161075b565b611ed8600b836122bb565b15611f3c5760405162461bcd60e51b815260206004820152602e60248201527f636f6c6c65637461626c652d647573742f746f6b656e2d69732d706172742d6f60448201526d198b5d1a194b5c1c9bdd1bd8dbdb60921b606482015260840161075b565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611f9d576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015611f97573d6000803e3d6000fd5b50611fb1565b611fb16001600160a01b0383168483612173565b604080516001600160a01b038086168252841660208201529081018290527f1e34c1aee8e83c2dcc14c21bb4bfeea7f46c0c998cb797ac7cc4d7a18f5c656b9060600160405180910390a1505050565b61200b828261124d565b610f6b576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556120413390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61208f828261124d565b15610f6b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120541515611d5d565b6040516001600160a01b038085166024830152831660448201526064810182905261216d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125cf565b50505050565b6040516001600160a01b038316602482015260448101829052610ec690849063a9059cbb60e01b90606401612136565b60028054600180546001600160a01b03199081166001600160a01b038416179091551690556040517f7880f0fcc848e1f26e461654b100a69f8d0641e29aa29f6596c6afadbb36b5ea90600090a1565b6001600160a01b0381166122675760405162461bcd60e51b815260206004820152603560248201527f676f7665726e61626c652f70656e64696e672d676f7665726e6f722d73686f756044820152746c642d6e6f742d62652d7a65726f2d61646472657360581b606482015260840161075b565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def9060200160405180910390a150565b6001600160a01b03811660009081526001830160205260408120541515611d5d565b6122f36001600160a01b038216836000196126a1565b6001600160a01b0382166000908152600a6020526040902061231590826127c5565b506040516001600160a01b0382811682528316907fca338b12f744b3a015d8436ee96c4b9c73826faed1fbb50e689f05e0ba02f5279060200160405180910390a25050565b600082600001828154811061237f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b606060006123a1836002612f68565b6123ac906002612f50565b67ffffffffffffffff8111156123d257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123fc576020820181803683370190505b509050600360fc1b8160008151811061242557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061246257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612486846002612f68565b612491906001612f50565b90505b6001811115612525576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124d357634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106124f757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361251e81612fca565b9050612494565b508315611d5d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161075b565b60008181526001830160205260408120546125bb575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105dd565b5060006105dd565b6000611d5d83836127da565b6000612624826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128f79092919063ffffffff16565b805190915015610ec657808060200190518101906126429190612b67565b610ec65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161075b565b80158061272a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156126f057600080fd5b505afa158015612704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127289190612cde565b155b6127955760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161075b565b6040516001600160a01b038316602482015260448101829052610ec690849063095ea7b360e01b90606401612136565b6000611d5d836001600160a01b038416612574565b600081815260018301602052604081205480156128ed5760006127fe600183612f87565b855490915060009061281290600190612f87565b905081811461289357600086600001828154811061284057634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061287157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128b257634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105dd565b60009150506105dd565b6060612906848460008561290e565b949350505050565b60608247101561296f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161075b565b843b6129bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161075b565b600080866001600160a01b031685876040516129d99190612d5c565b60006040518083038185875af1925050503d8060008114612a16576040519150601f19603f3d011682016040523d82523d6000602084013e612a1b565b606091505b5091509150612a2b828286612a36565b979650505050505050565b60608315612a45575081611d5d565b825115612a555782518084602001fd5b8160405162461bcd60e51b815260040161075b9190612e7b565b80518015158114612a7f57600080fd5b919050565b600082601f830112612a94578081fd5b813567ffffffffffffffff80821115612aaf57612aaf613012565b604051601f8301601f19908116603f01168101908282118183101715612ad757612ad7613012565b81604052838152866020858801011115612aef578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215612b1c578081fd5b8135611d5d81613028565b600080600060608486031215612b3b578182fd5b8335612b4681613028565b92506020840135612b5681613028565b929592945050506040919091013590565b600060208284031215612b78578081fd5b611d5d82612a6f565b600080600060608486031215612b95578283fd5b612b9e84612a6f565b92506020840151612bae81613028565b80925050604084015190509250925092565b600060208284031215612bd1578081fd5b5035919050565b60008060408385031215612bea578182fd5b823591506020830135612bfc81613028565b809150509250929050565b600060208284031215612c18578081fd5b81356001600160e01b031981168114611d5d578182fd5b600060208284031215612c40578081fd5b813567ffffffffffffffff811115612c56578182fd5b61290684828501612a84565b60008060008060008060c08789031215612c7a578182fd5b863567ffffffffffffffff811115612c90578283fd5b612c9c89828a01612a84565b9650506020870135612cad81613028565b94506040870135612cbd81613028565b959894975094956060810135955060808101359460a0909101359350915050565b600060208284031215612cef578081fd5b5051919050565b6000815180845260208085019450808401835b83811015612d2557815187529582019590820190600101612d09565b509495945050505050565b60008151808452612d48816020860160208601612f9e565b601f01601f19169290920160200192915050565b60008251612d6e818460208701612f9e565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612db0816017850160208801612f9e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612de1816028840160208801612f9e565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b81811015612e2e5783516001600160a01b031683529284019291840191600101612e09565b50909695505050505050565b602081526000611d5d6020830184612cf6565b604081526000612e606040830185612cf6565b8281036020840152612e728185612d30565b95945050505050565b602081526000611d5d6020830184612d30565b60208082526018908201527f676f7665726e61626c652f6f6e6c792d676f7665726e6f720000000000000000604082015260600190565b6020808252601f908201527f5472616465466163746f72793a207472616465206e6f742070656e64696e6700604082015260600190565b60208082526034908201527f5472616465466163746f72793a20696e697469616c697a6174696f6e20677265604082015273185d195c881d1a185b8818da1958dadc1bda5b9d60621b606082015260800190565b60008219821115612f6357612f63612ffc565b500190565b6000816000190483118215151615612f8257612f82612ffc565b500290565b600082821015612f9957612f99612ffc565b500390565b60005b83811015612fb9578181015183820152602001612fa1565b8381111561216d5750506000910152565b600081612fd957612fd9612ffc565b506000190190565b6000600019821415612ff557612ff5612ffc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461190457600080fdfe49e347583a7b9e7f325e8963ee1f94127eba81e401796874b5a22f7c8f9d45f7a26469706673582212205a0c719fda2f448493271d8897538284bee0a008b1abb0d805dda07fc3174be364736f6c634300080400338eed360e86e418207f03bdbfeed36c97a429754d5b20cf2ba92a94b5e65c2bb70b43cb2c88b4e8fc5d4ac1352ba889b22584df0c58c4b5b589731a1c9f6f29d3",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 516,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)511_storage)"
      },
      {
        "astId": 132,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "governor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 135,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5643,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_tradeCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5649,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "pendingTradesById",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Trade)5482_storage)"
      },
      {
        "astId": 5654,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "swapperSafetyCheckpoint",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5657,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_pendingTradesIds",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(UintSet)2759_storage"
      },
      {
        "astId": 5662,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_pendingTradesByOwner",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UintSet)2759_storage)"
      },
      {
        "astId": 272,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_mechanicsRegistry",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IMechanicsRegistry)379"
      },
      {
        "astId": 5176,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "_approvedTokensBySwappers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(AddressSet)2632_storage)"
      },
      {
        "astId": 21,
        "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
        "label": "protocolTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(AddressSet)2632_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMechanicsRegistry)379": {
        "encoding": "inplace",
        "label": "contract IMechanicsRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AddressSet)2632_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2632_storage"
      },
      "t_mapping(t_address,t_struct(UintSet)2759_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2759_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)511_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)511_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Trade)5482_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITradeFactoryPositionsHandler.Trade)",
        "numberOfBytes": "32",
        "value": "t_struct(Trade)5482_storage"
      },
      "t_struct(AddressSet)2632_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2631,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2361_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)511_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 508,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 510,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2361_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2356,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2360,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trade)5482_storage": {
        "encoding": "inplace",
        "label": "struct ITradeFactoryPositionsHandler.Trade",
        "members": [
          {
            "astId": 5467,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5469,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_strategy",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5471,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_swapper",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5473,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_tokenIn",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5475,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_tokenOut",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5477,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_amountIn",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5479,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_maxSlippage",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5481,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_deadline",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UintSet)2759_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2758,
            "contract": "contracts/TradeFactory/TradeFactory.sol:TradeFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2361_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}